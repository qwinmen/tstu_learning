<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="statusStrip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAMDAAAAEAGACoHAAAFgAAACgAAAAwAAAAYAAAAAEAGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAABQMAAObkANrMQRrkeTrQcRZosTpA3UYAvQWAAABQAAA4AAQ8EBBIIAwwMAAASBgIHAAAAAAAZHiEA
        CA8ABhAAAAwAAhAAAA0CAAkEAAQFAAEPCgkTDgsFAQACAAkCAAwFAwkHBQUKBwMJCAQCBAUAAAkACCUF
        FEIADk8AFmkFLI4ZSrYKQLUAOrgAPMcHSNMAM6wCPbsANbcAK6gAMKINOpsPMX0gOXEZKU4AABMAAxYA
        AA0AAA0GAA4SBAgRBwceGh9DSFFQXW0KGzAAABQACicAAB0AABYxNk9qboFQUF4jIisODxMAAAYAABMA
        ABIAAA0AAAcAAAAAAQAAAAEABQ4ACCIACzYkPoAcQJQAEXgAGY8KQcIAN74GRMwFQcMhTrUPQbEAKaEA
        JZoAKpYAKYUiPoUWKVwHEDEAABQAAA8FABAEABIeGCs2LjmLh5LZ3Ora5fmWqcQ7VHYhPmU/WoZje6kv
        RHE7TXZtfaKCj6+VoryhrsSMmLBka5I6P2YSGDUFDB8GDRYACAwAAgkAAg4aKUMzRnEAGFgAHnEqUrgG
        NagRRMIORcYKProTRrofOoQFJ3sAEnAAGngEJXsIIGgMGk4AABwAAA0bEhwAAACXjZrOxdnOyN+4uNDH
        zuept9NjeJhQbZR7nMmKr+F5ntZukMtxk893ltNyks1miL5afLFBZJYlRngqQngpPG85SnVmd5iYqL+w
        wNGtu82isMZpeJglNWMsQX8cNoMAInwLMZcYQa4QO6gTPaIsU68VIlA0RX45T5EtQoYzQoBFT383NlYz
        KzxYTFIAAAAAAADd0+Dw6v+Rkq6nrs84R2gIG0AqRGk2VoEhRXUlSn5SeLJwldN6oOFrktdhi9JsnORl
        mOFbkt1zp+52neFbfLsoR34AGUgAGT4ySWl4i6ypud3b6f+bqtsnNnQSJWkrQo4nQpItSp81U6Y3VJ80
        TpEAAAAWGjYNEzgfIkgnJkYhGzI+Mz0AAAAAAAAAAAAAAADa2emChKI+RmsFFTpZbJKnvuS71fq72P+6
        2P+Ip9Q6WosdP3VafbxpktdjlOBbkudgn/lFjetUmvVel+ZhlNpzoONul9U3XJQJKFsEHFANH1QvPHR6
        hb+2wfslMGoAADYAC0AADkIOHU4CET8GEDgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA2N0Va
        YXpIVnoqOmSer9auwebF2fzI3//F2vnH3/vM4f/A2PyEnMYiP3JFaqhrmOFblOlRlPFEkPRDkPBUl+xV
        k99cluFmnONvnuJsk9dAYKIDGl4YKGs4QoIfJWAECDstMFwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAA4P1ASHzlabZJzi7lmfault9y4xuPK2fPR3/XQ3+/Z5vTc5/XN2evb5v/B
        1PdIYpEwVJBvoelYl+hIjutYo/9aovZVmupSleRQj99Wjd5qm+t3n/F2lOUlO4kAC1M+RYQlKVoAABgf
        HjIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUIDgPIUBwiKx5kr45VYQrRHBWZ4iP
        m7PK1ene6ffX4evX4ejd4+rT2uOIj6CHk6uhtNdgfKstV5JonOJUlOJDiNhNk+ZQlulaoPNipvlgnfNa
        kutcjuhkjud6m/FAV6UJGVxGToNBQ2YPDiIaGB4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH
        Gj0bNFyEoc18mcY6V4NzjLi0ye/O3PiircN5hZdvfIp4hI6FkZeJk5qCi5TIz97R2u5lc4+SqMx8ncsV
        P3Rzpd9on+JbmeVdnu9WmOtIi+BOjuZYl/FalfJXjulfjOdtkuZxjNYaLWoLFkJCR2YBAxUmHyYAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAACC8iPm11lMt0lstph7Y6U3ttfp+Rn7tNWnRmdIuPnbOpus2twM+m
        t8SQoK10g5Nfa317iJ7D0e2QpMOqxOhqirMyWYVundFbjtdcluhcmOpXmexZnPFSmfFRl/Jen/tcl/Re
        kOhpkuFRcLUAEksbKFQzPF0DARQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA3TH9tjchyl9VZe7YXMV+S
        o8RqboF4fI7L2PLP5P/V6//J5P/C3/rO6//P6v+70++/1fFyh6NAVHNKX36wyem10fBgf55AZZFzneJo
        mOpakeJYl+ddovJNlupAjeRKlvBOlfBmpf9Ng9h0n+4/XqMHHFkxQXYPEzYYCREAAAAAAAAAAAAAAAAA
        AAAAAAApPG9rjMtultdpkM5BY5jD2f+NmbWRkqbV1urU4PzB1vbG3P/P6P/F4f+71/XB3vnN6P+80u7f
        9P+8z/CDlrkwRWWdtdOvyuVVcpc8X59njthxoelaktlOkN5QmelOmuxQnO9RmO9KiuJjoPZakONaidNK
        bbYLIWkiKWAGAA4AAAAAAAAAAAAAAAAAAAALJWhMdsNbj9txpehrlsdykra0yeWPm7fU2/zP2PrU4P/I
        2PzW4//P3P/V5P/U5Pvg8//L3OnS4vLU5PvI1PbP2/+9y/VVZo1NYoGatNhfeLApSIVyl89tntZTjtQ9
        gMtUl+JUleBhmeZeleZPjeFio/RPkNpdk+AACGMwN4YaEzYAAAAAAAAAAAAAAAAOHVs+ZLZgmPFUleZH
        hMZolsVykrVGWHfG0PLT3f+mseNjcJ4sOWc4QHUvOWlweaS4w+HD0uXW5/TT4/PN3fTO2//Q3f/G1v++
        0vubtdNGYYNBWY1SbaZFaZkeSn8FPIFHhdFXluBppOxgkd1pmupknfJTleZTm+FhnekAFngyOY47Nl0A
        AAAAAAAAAAAqKVsRJGddittVk+dUmudgouN4qNxLbJmQoM61v+8zOXQAA0MACUsMGV0EDVcCDFIEEFAN
        G09yharG3vq+1vLN5v+1y/XC2P+81P+z0PeWudOUuNZJZZsRL2oDKl4+bKZvqPNcm+xFhNRYkeBsmeph
        jeBlmvFHg9VhpOlcktkACGNHSZdBO14AAAAAAAAYDjkrMG0rRI5om+tOkeBRnOZIjtFuoNwoSYGElM8u
        NXQQFVoJD1gJFF4ABlQEC2AAB1oDEFwADlAbMWGAmsLB3f+31Pm/2f+81/+qxvVAYYgsUWs8YoBXeKpa
        fLd4oNVhkM1dlOVQjOVvrf9Sitxsleptk+tjj+x8sv81brMHNHc4R5Y0MnQxLEkAAAAAAAAmIV4YI21E
        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
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFECQOH0ooPXswSpYjP5MlQ5YxUJ8hQosJJFcAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmMTUA
        ECEAAx4AEzIDGjQADyUEHiwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAABgAAAAAAAAgeAAAAAA
        AAD/wAAAAB8AAP+AAAAADwAA/wAAAAAHAAD+AAAAAAMAAPwAAAAAAwAA/AAAAAABAAD4AAAAAAEAAPAA
        AAAAAQAA4AAAAAABAADAAAAAAAEAAIAAAAAAAQAAgAAAAAABAACAAAAAAAMAAIAAAAAABwAAwAAAAAAP
        AADAAAAAAA8AAOAAAAAADwAA8AAAAAAPAAD4AAAAAA8AAP+AAAAADwAA/4AAAAAPAAD/gAAAAA8AAP/A
        AAAAHwAA/8AAAAAfAAD/wAAAAB8AAP/AAAAAHwAA/8AAAAA/AAD/wAAAAD8AAP/gAAAAPwAA//AAAAA/
        AAD/8AAAAH8AAP/4AAAAfwAA//wAAAB/AAD//gAAAH8AAP//AAAAfwAA//8AAAB/AAD//4AAAH8AAP//
        wAAY/wAA///AABj/AAD//+ABuP8AAP//+AP//wAA///8B///AAA=
</value>
  </data>
</root>