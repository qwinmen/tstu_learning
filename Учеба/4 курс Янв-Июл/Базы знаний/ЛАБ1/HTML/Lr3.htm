<HTML>
<HEAD>
<TITLE>Лабораторная работа № 3</TITLE>
</HEAD>
<B><FONT FACE="Times New Roman"><P>Лабораторная работа № 3</P>
</B><P ALIGN="CENTER">РАЗРАБОТКА ЭКСПЕРТНОЙ СИСТЕМЫ, РЕАЛИЗУЮЩЕЙ ОБРАТНУЮ ЦЕПОЧКУ РАССУЖДЕНИЙ НА ЯЗЫКЕ ПРОЛОГ.</P>
<B><P>Цель</B>: Практическое ознакомление с языком ПРОЛОГ</P>
<B><P>Задания: </P>
</B><P>1. Реализовать алгоритм и базу знаний на ЭВМ;</P>
<P>2. Проверить работу экспертной системы на конкретном примере.</P>
<B><P>Методика выполнения работы</P>
</B><P>В лабораторных работах № 1 и 2 при разработке фрагментов экспертной системы предполагалось использование проблемно-ориентированных языков программирования, типа Паскаль или Си. Подобный подход, когда проектировщик должен решить все множество задач; выбор модели базы знаний, разработка модулей логического вывода и т.д., получил название функционального подхода. 3 этом случае все задачи, решаемые экспертной системой, должны быть представлены в разрабатываемой</FONT> <FONT FACE="Times New Roman">программе в виде некоторого набора функций.</P>
<P>Однако в большинстве случаев база знаний экспертной системы представляет собой описание группы объектов и связей (отношений) между ними. При обработке подобных баз знаний чаще используется логический подход. В этом случае все объекты (факты базы знаний) заменяются логическими высказываниями, а отношения между объектами (правила базы знаний) формируются из высказываний с помощью логических связок типа "И". "ИЛИ". "НЕ". Подобный подход позволяет разработчику экспертной системы отойти от процедурного уровня программы (КАК достигается результат) и практически целиком обратиться к декларативному (ЧТО должно быть результатом).</P>
<P>Системы программирования, реализующие логический подход к программированию, предоставляют разработчику встроенные механизмы логического вывода. Представив базу знаний в виде совокупности логических высказываний, пользователь задает л-л цель - обработку и сопоставление правил, получение же вывод. берет на себя система. Рассмотрим процесс разработки экспертной системы в среде: Turbo-Prolog. В качестве основы используем пример базы знаний рассмотренных в лабораторной работе № 1.</P>
<P>Основной структурной единицей программы на языке ПРОЛОГ</P>
<P>является предикат - стандартная или описанная программист:</P>
<P>логическая функция, устанавливающая соответствие между своими аргументами. То, как предикат устанавливает взаимосвязь между объектами - аргументами, описывается с помощью фактов правил базы знаний. В свою очередь, представление фактов правил в ПРОЛОГе основано на предикатах [l,5]</P>
<P>Факты, используемые базой знаний. опишем с помощью предиката:</P>
<B><P>is(X,Y).         /X есть Y </FONT>/</P>
</B><FONT FACE="Times New Roman"><P>В этом случае запись:</P>
<B><P>is("сернистая кислота"."кислота"). </P>
</B><P>будет соответствовать:</P>
<B><P>сернистая кислота = /" есть "/ кислота.</P>
</FONT>
<FONT FACE="Times New Roman"><P>is("сернистая кислота","кислота").</P>
</FONT><P>is<FONT FACE="Times New Roman">("азотная кислота","кислота"). </P>
<P>is("кислота","агрессивная жидкость")</P>
</B><P>Рис. 1. Факты базы знаний</P>
<P>Обращение к факту происходит по его имени (функтору) его параметрам. Так, при обращении</P>
</FONT><B><P>Goal: is<FONT FACE="Times New Roman">("азотная кислота"."кислота")</B> система ответит</P>
</FONT><B><P>Yes</P>
</B><FONT FACE="Times New Roman"><P>т.к. найден факт (N 2). имеющий функтор "is" и параметры "азотная кислота" и "кислота".</P>
<P>При обращении к факту один или несколько параметров могут быть несвязанными (неопределенными) переменными. В этом случае диалог с системой будет выглядеть так:</P>
<B><P>Goal' is("сернистая кислота",Х)</P>
<P>Х=кислота</B>              / из факта N 2 / </P>
</FONT><B><P>1 Solution</B><FONT FACE="Times New Roman">                / найдено 1 решение / </P>
<P>В случае, если какой-либо параметр не совпадает, ответ будет отрицательным:</P>
<B><P>is(X,"щелочь")</P>
</FONT><P>No       </B><FONT FACE="Times New Roman">          /"не найдено соответствующего факта '/ </P>
<P>Временные факты, полученные в ходе работы программы при конкретных входных данных, могут быть добавлены к фактам базы знаний в виде динамической базы данных.</P>
<P>Систему правил базы знаний представим в формате правил языка ПРОЛОГ, введя ряд новых предикатов (см. рис. 2)</P>
</FONT><B><P>sr<FONT FACE="Times New Roman">eda("кислота") if fact_sreda(X),!, </P>
</FONT><P>                                    <FONT FACE="Times New Roman">is(X,"кислота"). </P>
</FONT><P>sreda<FONT FACE="Times New Roman">( "кислота" ) if ask_sreda(X), !,</P><DIR>
<DIR>
<DIR>
<DIR>
</FONT><P>            <FONT FACE="Times New Roman">is(X,"кислота") .</P></DIR>
</DIR>
</DIR>
</DIR>
</FONT><P>sre<FONT FACE="Times New Roman">da("концентрированная кислота") if sreda("кислота"),!,</P><DIR>
<DIR>
<DIR>
<DIR>
<DIR>
<DIR>
<P>со</FONT>n<FONT FACE="Times New Roman">с("более_70").</P></DIR>
</DIR>
</DIR>
</DIR>
</DIR>
</DIR>
</FONT><P> Sreda(<FONT FACE="Times New Roman">"разбавленная кислота") if sreda("кислота"),!,</P><DIR>
<DIR>
<DIR>
<DIR>
<DIR>
<DIR>
<P>соnс("менее_70").</P></DIR>
</DIR>
</DIR>
</DIR>
</DIR>
</DIR>
</FONT><P> m<FONT FACE="Times New Roman">ater_v("хромоникелевая сталь") if</P><DIR>
<DIR>
<DIR>
<DIR>
<DIR>
<DIR>
</FONT><P>sreda(<FONT FACE="Times New Roman">"концентрированная кислота"). </P></DIR>
</DIR>
</DIR>
</DIR>
</DIR>
</DIR>
</FONT><P>m<FONT FACE="Times New Roman">ater_v( "углеродистая сталь") </FONT> if</P><DIR>
<DIR>
<DIR>
<DIR>
<DIR>
<DIR>
<FONT FACE="Times New Roman"><P>sreda("разбавленная кислота").</P></DIR>
</DIR>
</DIR>
</DIR>
</DIR>
</DIR>
</B><P>Рис 2. Правила базы знаний</P>
<P>Каждое правило программы, подобно фактам, характеризуется своим функтором и аргументами. Факты и правила, имеющие 1 одинаковые функторы, описывают основную единицу ПРОЛОГ-программы - предикат. Вообще говоря, факты можно рассматривать как правило с нулевой частью <B>ЕСЛИ.</B> Формально правило представляется как: функтор(список аргументов) :- список условий. Знак ":-" иногда заменяется ключевым словом "if" и отделяет условную часть правила от заголовка</P>
<P>Функтор и аргументы описывают цель, истинность которой доказывается в данном правиле (согласование правила). Так, в правиле 5 (см. рис. 2) целью является гипотеза:</P>
<P>материал ванны - хромоникелевая сталь</P>
<P>В список условий входят те условия, согласование которых необходимо для подтверждения данной гипотезы. Список представляет собой ряд обращений к предикатам (как описанным в программе, так и встроенным) , разделанных знаком ","</P>
<P>В ходе согласования правили может понадобиться выполнить какое-либо действие (арифметическую операцию, ввод-вывод ;• т д.). Для выполнения этих действий в ПРОЛОГ-системе предусмотрен ряд стандартных предикатов (например, инфиксный предикат "=" - предикат присвоения, или "write" - оператор вывода) Каждый из них при обращении выполняет необходимые действия и возвращает значение "Истина"</P>
<P>Так, в нашем примере вызывается предикат ask_sreda(X), предназначенный для определения конкретного значения переменной "Среда" О-: может быть описан так:</P>
</FONT><B><P>Ask_sreda(X) if           </B><FONT FACE="Times New Roman">/ ask_sreda - функтор,  X - аргумент, его значение - тип среды </FONT>/</P>
<B><FONT FACE="Times New Roman"><P>write( "Введите тип среды: "). </B>/ вывод сообщения стандартному предикатом </FONT>/</P>
<B><P>readln(X) .                                   </B><FONT FACE="Times New Roman">/ввод строковой переменной Х</FONT> /</P>
<B><P>asserta(fact_sreda(x))  </B><I>/</I><FONT FACE="Times New Roman"> добавление временного факта о конкретном</FONT> <FONT FACE="Times New Roman">значении среды / </P>
<P>Необходимость добавления временного факта обусловлена тем, что область действия переменных ограничена тем правилом, о котором они описаны. Если в разных правилах программы встречаются переменные с одинаковыми именами, то они могут различаться как своим смысловым значением, так и типом. В связи с этим знания, полученные в ходе работы при конкретных входных условиях, запоминаются во временных фактах. При необходимости сохраненная таким образом информация может быть затребована из динамической базы данных. Для создания временного факта используют встроенные предиката: asserts </FONT>-<FONT FACE="Times New Roman"> запись факта в начало или asser-tz - запись факта в конец списка одноименных фактов. После того, как факт был добавлен, с ник можно работать так же, как и с обычным Фактом ПРОЛОГ-программы (см. рис. 4).</P>
</FONT><B><P>Goai ; asserta(fact_sred<FONT FACE="Times New Roman">a( "сернистая кислота"))</P>
</FONT><P>Yes                        </B><FONT FACE="Times New Roman">/ новый факт был добавлен /</P>
</FONT><B><P>Goal: fact_sreda(X)          </B><FONT FACE="Times New Roman">/ обращение к факту /</P>
<B><P>Х=сернистая кислота</P>
</FONT><P>1 Solution</P>
<P>Goal fact_sred<FONT FACE="Times New Roman">a("азотная кислота")</P>
</FONT><P>No</P>
</B><FONT FACE="Times New Roman"><P>Рис 4 . Временные факта</FONT>.</P>
<FONT FACE="Times New Roman"><P>При составлении программы следует придерживаться следующих правил :</P>
<P>1. Факты и правила. описывающие один предикат, следует</P>
<P>2 Внутри группы факты и правила следует записать в порядке возрастания сложности (факты, простые правила, и т.д.), если только смысл программы не требует другого построения (факт-ловушка и т.п</FONT>.)</P>
<FONT FACE="Times New Roman"><P>Полученная программа уже способна делать выводы на основе информации, введенной пользователем. Однако, чтобы инициировать</FONT><B> </B><FONT FACE="Times New Roman">механизм логического вывода, .необходимо сделать запрос:</P>
</FONT><B><P>Goal: master_v<FONT FACE="Times New Roman">("хромоникелевая сталь")</P>
</B><P>Получив вопрос (цель) ПРОЛОГ-система начинает сопоставлять цель с фактами и правилами программы, при необходимости обращаясь к диалоговым правилам (см. рис. </FONT>5).</P>
<B><P>Goal: mater_v(X)</B> </P>
<FONT FACE="Times New Roman"><P>Введите тип среды: азотная кислота</P>
<B><P>Х="хромоникелевая сталь" </P>
</FONT><P>1 Solution</P>
</B><FONT FACE="Times New Roman"><P>Рис. 5. Фрагмент диалога с программой</P>
<P>Хотя программа и позволяет проводить обработку знаний, она еще не является настоящей экспертной системой. В ней реализованы лишь две основных составляющих экспертной системы -база знаний и механизм логического вывода, но отсутствуют системы объяснения и общения с пользователем. Именно способность к объяснению своих решений и тех рассуждений, на основе которых эти решения были приняты, позволяет назвать систему, основанную на знаниях, экспертной системой [</FONT>1].</P>
<FONT FACE="Times New Roman"><P>Язык ПРОЛОГ позволяет достаточно просто реализовать диалог с помощью системы меню или, практически, на естественном языке. Выбор конкретного типа диалога зависит от сложности разрабатываемой системы, от уровня подготовки пользователя и т.д. В рассматриваемом примере остановимся на простом диалоге типа "вопрос-ответ". Результатом работы программы теперь будет не только конкретная рекомендация, но и те рассуждения, на основе которых система пришла к данному результату.</FONT> <FONT FACE="Times New Roman">Запишем несколько предикатов, представляющих ядро системы. Прежде всего опишем предикат RUN, обеспечивающий диалог с пользователем и обращение к предикату ASK, формирующему запрос к базе знаний:</P>
</FONT><B><P>run</B><FONT FACE="Times New Roman">                                             / рекурсивно-вызываемое /</P>
</FONT><B><P>write(<FONT FACE="Times New Roman">" Выберите цель "),п1</B></FONT>,      <FONT FACE="Times New Roman">/ основное правило /</P>
<B><P>write(" 1. Материал ванны "),п1,</P>
<P>write(" 2. Материал футеровки "),п1,</P>
<P>write(" 3. Тип обогревателя "),п1, </P>
<P>write С" 4 Выход ").п1, </P>
<P>write" Введите число от 1 до 4 "),</P>
</FONT><P>readint(Num) ,</B><FONT FACE="Times New Roman">                                    / вводим номер пункта </FONT><I>/ </P>
</I><B><P>Num&lt;&gt;4,</B>                               <FONT FACE="Times New Roman">            / проверка правильности ввода / </P>
</FONT><B><P>ask(Num),</P>
<P>run.</B><FONT FACE="Times New Roman">                                                      / рекурсивный вызов / </P>
</FONT><B><P>run<FONT FACE="Times New Roman"> :- write("Работа завершена "),</B> /" завершение работы /</P>
</FONT><B><P>clear_fact</B>.                                              <FONT FACE="Times New Roman">/ очистка динамической базы данных /</P>
</FONT><B><P>ask(l) if mater_v(Y,[].List),                   </B><FONT FACE="Times New Roman">/обращение к правилу базы/ </P><DIR>
<DIR>
<DIR>
<DIR>
<DIR>
<DIR>
<DIR>
<DIR>
<DIR>
<DIR>

</FONT><P>   <FONT FACE="Times New Roman">/знаний Материал_ванны</FONT>,<FONT FACE="Times New Roman">  List - список рассуждений/</P></DIR>
</DIR>
</DIR>
</DIR>
</DIR>
</DIR>
</DIR>
</DIR>
</DIR>
</DIR>

</FONT><B><P>write (<FONT FACE="Times New Roman">"Материал ванны: ", Y,</B>            /" вывод результатов '/ '</P>
<B><P> "Решение получено на основании следующих рассуждений:"),</P>
</FONT><P>Why(List).                                          </B><FONT FACE="Times New Roman"> / объяснение рассуждений "/ </P>
</FONT><B><P>ask(2) if ...</P>
<FONT FACE="Times New Roman"><P>ask(_) :- write(" Неверный ввод "), nl.</FONT>      </B><FONT FACE="Times New Roman">/правило-ловушка некорректного ввода /</P>
<P>Ркс. 6. Пример ядра программы</P>
<P>Работа системы начинается запуском предиката RUN. Запись его правил достаточно проста - обеспечение диалога с пользователем и обращение к предикату ASK. Номер выбранного пункта меню является аргументом данного предиката, по нему система выбирает соответствующее правило</FONT>.<FONT FACE="Times New Roman"> Если подобное правило найдено. формируется запрос к правилам базы знаний (для первого пункта меню - обращение к предикату mater_v) .</P>
<P>Выбор одного из пунктов меню приводит :-&lt; вызову требуемого правила предиката ASK, которое, з свое очередь, обратится к базе знаний, формируя запрос к нужному предикату. Все основные предикаты базы знаний С в нашем примере это материал_ван-ны, материал_футеровки к тип_обогреза) имеют три аргумента. Первый из них - ответ системы на запрос, конкретная рекомендация по интересующему пользователя вопросу.</P>
<P>Второй и третий параметры при обращении к предикату </FONT>m<FONT FACE="Times New Roman">iater_v(Y,I],List) (рис. 7) предназначены для работы системы объяснений К пустому списку (второй параметр) по ходу работы системы будет добавляться информация о каждом согласованное правиле.</P>
<P>В этом случае правила базы знаний будет выглядеть так</P>
</FONT><B><P>Y<FONT FACE="Times New Roman">="материал ванны = хромоникелевая сталь" ,</B></FONT>  /<FONT FACE="Times New Roman"> результат согласования правила</FONT>/ </P>
<B><P>X1=[Y,X]                                                                        </B>/<FONT FACE="Times New Roman"> результат добавляется к списку </FONT>/</P>
<B><P>sreda<FONT FACE="Times New Roman">( "концентрированная_кислота" .List, [ X</FONT>  List2 ] ,Y) if </P>
<P>|<FONT FACE="Times New Roman">sreda( "кислота" , List, List.i ,Y1)</FONT>'.!</P>
<FONT FACE="Times New Roman"><P>со</FONT>n<FONT FACE="Times New Roman">с("болес 70",Listi,List2.Y2), I I ! </P>
</FONT><P>Y="<FONT FACE="Times New Roman">среда = концентрированная_кислота</FONT>",</P>
<P>X=[Y , Y1,Y2 ].</P>
</B><FONT FACE="Times New Roman"><P>Каждый элемент полученного списка так же является списком и описывает одно согласованное правило, например, "среда." агрессивная жидкость т.к. среда = кислота". По окончании работы ложностью сформированный список может быть предложен пользователю как результат работы системы объяснений (рис. 8). Система объяснений на основе списка иллюстрирует процесс нахождения решения.</P>
</FONT><B><FONT FACE="Times New Roman" SIZE=3><P>Выберите цель </P>
<P>1. Материал ванны</P>
<P>2 Материал футеровки</P>
<P>3 тип обогревателя</P>
<P>4 Выход</P>
<P>Введите число от 1 до 4 1 </P>
<P>Среда</P>
<P>сернистая кислота</P>
<P> концентрация, </FONT><I><FONT SIZE=3>% </I>75</P>
</FONT><FONT FACE="Times New Roman" SIZE=3><P>материал ванны: ,хромоникелевая сталь </P>
<P>Решение получено на основании следующих рассуждений:</P>
<P>материал ванны = хромоникелевая сталь т.к.:</P>
<P>среда = концентрированная_кислота</P>
<P>среда = -концентрированная_кислота т.к.:</P>
<P>среда == кислота </P>
<P>И концентрация </FONT><I><FONT SIZE=3>=</I></FONT><FONT FACE="Times New Roman" SIZE=3> более_70</P>
<P>Среда = кислота т.к </P>
<P>среда = сернистая кислота</P>
</B></FONT><FONT FACE="Times New Roman"><P>Рис. 8. Пример работы системы объяснений</P>
<P>Полученная программа реализует обратный алгоритм рассуждений - от гипотез к фактам. Данный алгоритм практически полностью совпадает с ходом логического вывода в системе ПРОЛОГ, поэтому он реализуется достаточно просто. Реализация же прямого алгоритма рассуждений потребует значительного усложнения программы.</P>
<P>Порядок выполнения работы</P>
</FONT><P>1<FONT FACE="Times New Roman">. Провести анализ правил базы знаний и логической структуры</P>
<P>алгоритма.</P>
<P>2. Подготовить программу экспертной системы на языке ПРОЛОГ".</P>
<P>3 Протестировать работу экспертной системы на контрольном</P>
<P>примере </FONT><A HREF="Tab/Tab27.htm"><B><FONT FACE="Times New Roman">из табл. 27</B></FONT></A></P>
<FONT FACE="Times New Roman"><P>Содержание отчета</P>
<P>1. Текст программы, реализующей алгоритм обратной цепочки рассуждений.</P>
<P>2. Описание программы.</P>
<P>3. Описание алгоритма.</P>
<P>4. Результаты работы алгоритма.</P>
</HTML>
