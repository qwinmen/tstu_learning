<!DOCTYPE html>
<html lang="ru">
<head>
 <meta http-equiv="X-UA-Compatible" content="IE=Edge" />
 <meta charset="Windows-1251">
 <meta http-equiv="Content-Language" content="ru" />
 <title>Одноступенчатая зубчатая передача( шестеренки) opengl / Форум / Программирование игр / GameDev.ru — Разработка игр</title>
 <meta name="Description" content="Здравствуйте люди добрые!) Задача состоит как раз в построении 3х шестеренок 3D на базе OpenGL, они соединены между собой и имеют размер маленькая, средняя, большая. Маленькая..." />
 <meta name="Keywords" content="Одноступенчатая, зубчатая, передача, шестеренки, opengl, Форум, Программирование, игр, GameDev, ru, Разработка, игр" />
 
 <link href="http://www.gamedev.ru/favicon.ico" rel="SHORTCUT ICON" />
 <link href="http://www.gamedev.ru/_css/main.css?v=6" rel="stylesheet" type="text/css" />
 <script type="text/javascript" src="http://www.gamedev.ru/_js/skif.js?v=16"></script>
 <script type="text/javascript" src="http://www.gamedev.ru/_js/gamedev.js?v=16"></script>
 <link href="https://plus.google.com/109184614944486802626" rel="publisher" />
 
</head>

<body>
<div style="background: #efefef; height:19px"><div id="login" style="float: right;"></div><b>Программирование игр, создание игрового движка, OpenGL, DirectX, физика, форум</b></div>
<div id="header"><a id="sitename" href="http://www.gamedev.ru/">GameDev.ru &nbsp;</a></div>

 <div id="path"><div id="search" style="float: right;"></div>
 <a href="http://www.gamedev.ru/" title="GameDev.ru — Разработка игр">GameDev.ru</a> / <a href="http://www.gamedev.ru/code/" title="Программирование игр">Программирование</a> / <a href="http://www.gamedev.ru/code/forum/" title="Форум">Форум</a> / <b>Одноступенчатая зубчатая передача( шестеренки) opengl</b>
 </div>

 <div id="container">
  <div id="left">
   
<ul class="menu">
 <li><a href="http://www.gamedev.ru/news/" title="Новости в области разработки игр">Новости</a></li>
 <li><a href="http://www.gamedev.ru/articles/" title="Статьи для разработчиков игр">Статьи</a></li>
 <li><a href="http://www.gamedev.ru/tip/" title="Подсказки">Подсказки</a></li>
 <li><a href="http://www.gamedev.ru/terms/" title="Раъяснения к терминам игровой индустрии и разработки игр">Термины</a></li>
 <li><a href="http://www.gamedev.ru/faq/" title="FAQ: Ответы на частозадаваемые вопросы">FAQ</a></li>
 <li><a href="http://www.gamedev.ru/pages/" title="Персональные страницы пользователей">Страницы</a></li>
 <li><a href="http://www.gamedev.ru/community/" title="Сообщества: Пользовательские разделы с группами участников">Сообщества</a></li>
 <li class="sel"><a href="http://www.gamedev.ru/forum/" title="Форум разработчиков игр">Форум</a>
<ul>
 <li class="sel"><a href="http://www.gamedev.ru/code/forum/" title="Программирование игр">&gt; Код</a></li>
 <li><a href="http://www.gamedev.ru/art/forum/" title="Арт: Графика в играх, графический дизайн">Арт</a></li>
 <li><a href="http://www.gamedev.ru/gamedesign/forum/" title="Игровой Дизайн">Геймдизайн</a></li>
 <li><a href="http://www.gamedev.ru/industry/forum/" title="Игровая Индустрия">Индустрия</a></li>
 <li><a href="http://www.gamedev.ru/sound/forum/" title="Звуковое оформление в играх">Звук</a></li>
 <li><a href="http://www.gamedev.ru/mobile/forum/" title="Разработка игр под мобильные телефоны, КПК и iPhone">Мобильники</a></li>
 <li><a href="http://www.gamedev.ru/projects/forum/" title="Проекты">Проекты</a></li>
 <li><a href="http://www.gamedev.ru/job/forum/" title="Работа: Вакансии и резюме">Работа</a></li>
 <li><a href="http://www.gamedev.ru/flame/forum/" title="Флейм: разговоры на различные темы">Флейм</a></li>
 <li><a href="http://www.gamedev.ru/site/forum/" title="Обсуждение сайта и его работы, пожелания">Сайт</a></li>
 <li><a href="http://www.gamedev.ru/forum/rss" title="RSS канал новых тем форума">RSS</a></li>
</ul></li>
 <li><a href="http://www.gamedev.ru/files/" title="Качалка: Файлы и изображения">Качалка</a></li>
 <li><a href="http://www.gamedev.ru/members/" title="Участники проекта GameDev.ru">Участники</a></li>
 <li><a href="http://www.gamedev.ru/users/" title="Регистрации пользователей">Пользователи</a></li>
</ul>

   <div>
    
   </div>
  </div>
  <div id="main">
  <div id="main_body" style="height: 1%;">
   
   <h1 class="title" itemprop="name">Одноступенчатая зубчатая передача( шестеренки) opengl</h1>
   <!--BODY-->
   <div style="height: 18px; text-align: right; padding: 5px;">
<div id="share_button" class="button" data-url="sharetopic=126000" style="float: right;">Поделиться <img src="http://www.gamedev.ru/_img/socials_likes.gif" style="width: 45px; height: 14px;" /></div>
<span style="padding: 5px;">
</span>
</div>
<div id="m0" class="mes">
 <table class="mes"><tr><th><b><a href="http://www.gamedev.ru/users/?id=43710" title="jam ">Marmelade</a></b></th><td class="level">Пользователь</td><td class="center">www</td><td style="width: 100px">15 ноя. 2009</td><td><i>17:20</i></td><td><i><a href="http://www.gamedev.ru/code/forum/?id=126000#m0" title="Ссылка на 0-е сообщение">#0</a></i></td></tr></table>
  <div class="block">
Здравствуйте люди добрые!)
<br />Задача состоит как раз в построении 3х шестеренок 3D на базе OpenGL, они соединены между собой и имеют размер маленькая, средняя, большая. Маленькая шестеренка по нажатию клавиши сообщает средней( а средняя большой) движение, по нажатию другой клавиши движение останавливается( не обязательно реально). 
<br />1. Как организовать построение самой шестеренки в 3д( Написать класс, либо сделать чтобы они все были заданы изначально и не изменялись) как их рисовать GL_POLYGON или другими средствами.
<br />2. Как расчитать эвольветовое сцепление программным способом( и нужно ли?) чтобы шестеренки грамотно взаимодействовали друг с другом. Может все таки не стоит этим заморачиваться и сделать какое то упрощение?  </div>
</div>

<div id="ad" style="min-height: 130px;">
<div id="ad_content" style="display: none; text-align: right;"><a href="http://www.gamedev.ru/help/members">Убрать рекламу</a><br />
<script type="text/javascript"><!--
google_ad_client = "ca-pub-2685995649219494";
/* GameDev.ru, 728x90 */
google_ad_slot = "4908377282";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
</div>

<div id="m1" class="mes">
 <table class="mes"><tr><th><b><a href="http://www.gamedev.ru/users/?id=15406" title="Аслан Абисалов">Aslan</a></b></th><td class="level">Постоялец</td><td class="center"><a href="http://aslan7470.moy.su/" rel="nofollow" title="http://aslan7470.moy.su/ (nofollow для неучастников)">www</a></td><td style="width: 100px">15 ноя. 2009</td><td><i>19:54</i></td><td><i><a href="http://www.gamedev.ru/code/forum/?id=126000#m1" title="Ссылка на 1-е сообщение">#1</a></i></td></tr></table>
  <div class="block">
В цикле, либо по таймеру
<br />&nbsp; Рисовать 3 шестеренки (любым способом, хошь GL_TRIANGLES, хошь VERTEX_ARRAY)
<br />&nbsp; Увеличить углы поворота обратно пропорционально радиусу
<p></p>
  </div>
</div>

<div id="m2" class="mes">
 <table class="mes"><tr><th><b><a href="http://www.gamedev.ru/users/?id=27108" title="Азат ">Dent</a></b></th><td class="level">Постоялец</td><td class="center"><a href="http://www.gamedev.ru/community/virtual_aviaprom/" title="http://www.gamedev.ru/community/virtual_aviaprom/">www</a></td><td style="width: 100px">15 ноя. 2009</td><td><i>21:03</i></td><td><i><a href="http://www.gamedev.ru/code/forum/?id=126000#m2" title="Ссылка на 2-е сообщение">#2</a></i></td></tr></table>
  <div class="block">
Краткая теория.
<br />2 зубчатых колеса касаются другу друга по делительным диаметрам 
<p>d=m*z</p>
<p>где м - модуль - влияет на размер зуба
<br />&nbsp; &nbsp; &nbsp; z - количество зубьев</p>
<p>2 зубчатых колеса в зацеплении всегда должны иметь один и тот же модуль
<br />соответственно различаются по количеству зубьев</p>
<p>расстояние между осями зубчатых колес -&nbsp; A= (d1+d2)/2</p>
<p>
<br />держи процедуру:</p>
<p>[радиус отверстия, половина делительного диаметра, ширина колеса, количество зубьев, модуль зуба] пример: Gear( 1.0, 4.0, 1.0, 20, 0.7 );</p>
<table><tr><td><div style="background: #f2f2f2; padding: 5px; margin: 4px;"><pre>procedure TfrmGL.Gear(inner_radius, outer_radius, width: GLfloat; teeth: GLint; tooth_depth: GLfloat);
var
    i           : GLint;
    r0, r1, r2  : GLfloat;
    angle, da   : GLfloat;
    u, v, len   : GLfloat;
begin
    r0 := inner_radius;
    r1 := outer_radius - tooth_depth/2.0;
    r2 := outer_radius + tooth_depth/2.0;

    da := 2.0*Pi/teeth/4.0;
    glShadeModel( GL_FLAT );
    glNormal3f( 0.0, 0.0, 1.0 );

    // передняя сторона
    glBegin( GL_QUAD_STRIP );
    for i := 0 to teeth do
    begin
        angle := i * 2.0*Pi/teeth;
        glVertex3f( r0*cos(angle), r0*sin(angle), width*0.5 );
        glVertex3f( r1*cos(angle), r1*sin(angle), width*0.5 );
        glVertex3f( r0*cos(angle), r0*sin(angle), width*0.5 );
        glVertex3f( r1*cos(angle+3*da), r1*sin(angle+3*da), width*0.5 );
    end;
    glEnd;

    // передняя сторона зубьев
    glBegin( GL_QUADS );
    da := 2.0*Pi/teeth/4.0;
    for i := 0 to teeth - 1 do
    begin
        angle := i*2.0*Pi/teeth;

        glVertex3f( r1*cos(angle),      r1*sin(angle),      width*0.5 );
        glVertex3f( r2*cos(angle+da),   r2*sin(angle+da),   width*0.5 );
        glVertex3f( r2*cos(angle+2*da), r2*sin(angle+2*da), width*0.5 );
        glVertex3f( r1*cos(angle+3*da), r1*sin(angle+3*da), width*0.5 );
    end;
    glEnd;

    glNormal3f( 0.0, 0.0, -1.0 );

    // задняя сторона
    glBegin( GL_QUAD_STRIP );
    for i := 0 to teeth do
    begin
        angle := i*2.0*Pi/teeth;
        glVertex3f( r1*cos(angle), r1*sin(angle), -width*0.5 );
        glVertex3f( r0*cos(angle), r0*sin(angle), -width*0.5 );
        glVertex3f( r1*cos(angle+3*da), r1*sin(angle+3*da), -width*0.5 );
        glVertex3f( r0*cos(angle), r0*sin(angle), -width*0.5 );
    end;
    glEnd;

    // обратная сторона зубьев
    glBegin( GL_QUADS );
    da := 2.0*Pi/teeth/4.0;
    for i := 0 to teeth - 1 do
    begin
        angle := i*2.0*Pi/teeth;

        glVertex3f( r1*cos(angle+3*da), r1*sin(angle+3*da), -width*0.5 );
        glVertex3f( r2*cos(angle+2*da), r2*sin(angle+2*da), -width*0.5 );
        glVertex3f( r2*cos(angle+da),   r2*sin(angle+da),   -width*0.5 );
        glVertex3f( r1*cos(angle),      r1*sin(angle),      -width*0.5 );
    end;
    glEnd;

    // внешняя сторона зубьев
    glBegin( GL_QUAD_STRIP );
    for i := 0 to teeth - 1 do
    begin
        angle := i*2.0*Pi/teeth;

        glVertex3f( r1*cos(angle),      r1*sin(angle),       width*0.5 );
        glVertex3f( r1*cos(angle),      r1*sin(angle),      -width*0.5 );
        u   := r2*cos(angle+da) - r1*cos(angle);
        v   := r2*sin(angle+da) - r1*sin(angle);
        len := sqrt( u*u + v*v );
        u   := u/len;
        v   := v/len;
        glNormal3f( v, -u, 0.0 );
        glVertex3f( r2*cos(angle+da),   r2*sin(angle+da),    width*0.5 );
        glVertex3f( r2*cos(angle+da),   r2*sin(angle+da),   -width*0.5 );
        glNormal3f( cos(angle), sin(angle), 0.0 );
        glVertex3f( r2*cos(angle+2*da), r2*sin(angle+2*da),  width*0.5 );
        glVertex3f( r2*cos(angle+2*da), r2*sin(angle+2*da), -width*0.5 );
        u   := r1*cos(angle+3*da) - r2*cos(angle+2*da);
        v   := r1*sin(angle+3*da) - r2*sin(angle+2*da);
        glNormal3f( v, -u, 0.0 );
        glVertex3f( r1*cos(angle+3*da), r1*sin(angle+3*da),  width*0.5 );
        glVertex3f( r1*cos(angle+3*da), r1*sin(angle+3*da), -width*0.5 );
        glNormal3f( cos(angle), sin(angle), 0.0 );
    end;

    glVertex3f( r1*cos(0), r1*sin(0), width*0.5 );
    glVertex3f( r1*cos(0), r1*sin(0), -width*0.5 );

    glEnd;

    glShadeModel( GL_SMOOTH );

    // внутренний цилиндр
    glBegin( GL_QUAD_STRIP );
    for i := 0 to teeth do
    begin
        angle := i*2.0*Pi/teeth;
        glNormal3f( -cos(angle), -sin(angle), 0.0 );
        glVertex3f( r0*cos(angle), r0*sin(angle), -width*0.5 );
        glVertex3f( r0*cos(angle), r0*sin(angle), width*0.5 );
    end;
    glEnd;
end;</pre></div></td></tr></table>
  </div>
</div>

<div id="m3" class="mes">
 <table class="mes"><tr><th><b><a href="http://www.gamedev.ru/users/?id=38691">X512</a></b></th><td class="level">Постоялец</td><td class="center"><a href="http://www.gamedev.ru/users/?id=38691" title="http://www.gamedev.ru/users/?id=38691">www</a></td><td style="width: 100px">15 ноя. 2009</td><td><i>21:05</i></td><td><i><a href="http://www.gamedev.ru/code/forum/?id=126000#m3" title="Ссылка на 3-е сообщение">#3</a></i></td></tr></table>
  <div class="block">
<b>Marmelade</b>
<br /><span class="q">&gt; Задача состоит как раз в построении 3х шестеренок 3D на базе OpenGL, они</span>
<br /><span class="q">&gt; соединены между собой и имеют размер маленькая, средняя, большая. Маленькая</span>
<br /><span class="q">&gt; шестеренка по нажатию клавиши сообщает средней( а средняя большой) движение, по</span>
<br /><span class="q">&gt; нажатию другой клавиши движение останавливается( не обязательно реально).</span>
<br />Вот исходник твоей задачи:<b><a href="http://www.gamedev.ru/files/?id=48102">gears</a></b>. Осталось только реакцию на клавиши добавить.
<p class="r" style="margin-top: 1px; margin-bottom: 2px;"><span class="q" style="font-size: 80%;">Правка: 15 ноя. 2009 21:06</span></p>
  </div>
</div>

<div id="m4" class="mes">
 <table class="mes"><tr><th><b><a href="http://www.gamedev.ru/users/?id=27108" title="Азат ">Dent</a></b></th><td class="level">Постоялец</td><td class="center"><a href="http://www.gamedev.ru/community/virtual_aviaprom/" title="http://www.gamedev.ru/community/virtual_aviaprom/">www</a></td><td style="width: 100px">15 ноя. 2009</td><td><i>21:05</i></td><td><i><a href="http://www.gamedev.ru/code/forum/?id=126000#m4" title="Ссылка на 4-е сообщение">#4</a></i></td></tr></table>
  <div class="block">
да и чтобы зацепление было ровным учти что&nbsp;  n1/n2=z2/z1
<p>n- число оборотов
<br />z- число зубов</p>
<p class="r" style="margin-top: 1px; margin-bottom: 2px;"><span class="q" style="font-size: 80%;">Правка: 15 ноя. 2009 21:06</span></p>
  </div>
</div>

<div id="m5" class="mes">
 <table class="mes"><tr><th><b><a href="http://www.gamedev.ru/users/?id=9563">О. Федор</a></b></th><td class="level">Постоялец</td><td class="center"><a href="http://www.gamedev.ru/community/cfd/" title="http://www.gamedev.ru/community/cfd/">www</a></td><td style="width: 100px">15 ноя. 2009</td><td><i>21:25</i></td><td><i><a href="http://www.gamedev.ru/code/forum/?id=126000#m5" title="Ссылка на 5-е сообщение">#5</a></i></td></tr></table>
  <div class="block">
<b>Marmelade</b>
<br />В QT SDK есть пример для трех шестеренок, вот код
<div style="background: #f2f2f2; padding: 5px; margin: 4px;"><pre><span style="color: #808080">//glwidget.h</span>
<span style="color: #0030fF; ">#ifndef</span> GLWIDGET_H
<span style="color: #0030fF; ">#define</span> GLWIDGET_H

<span style="color: #0030fF; ">#include</span> <span style="color: #a06000">&lt;</span>QGLWidget<span style="color: #a06000">&gt;</span>

<span style="color: #0030fF; ">class</span> GLWidget : <span style="color: #0030fF; ">public</span> QGLWidget
{
    Q_OBJECT

<span style="color: #0030fF; ">public</span>:
    GLWidget<span style="color: #a06000">(</span>QWidget *parent = <span style="color: #F04000; ">0</span><span style="color: #a06000">)</span>;
    ~GLWidget<span style="color: #a06000">(</span><span style="color: #a06000">)</span>;

    <span style="color: #0030fF; ">int</span> xRotation<span style="color: #a06000">(</span><span style="color: #a06000">)</span> <span style="color: #0030fF; ">const</span> { <span style="color: #0030fF; ">return</span> xRot; }
    <span style="color: #0030fF; ">int</span> yRotation<span style="color: #a06000">(</span><span style="color: #a06000">)</span> <span style="color: #0030fF; ">const</span> { <span style="color: #0030fF; ">return</span> yRot; }
    <span style="color: #0030fF; ">int</span> zRotation<span style="color: #a06000">(</span><span style="color: #a06000">)</span> <span style="color: #0030fF; ">const</span> { <span style="color: #0030fF; ">return</span> zRot; }

<span style="color: #0030fF; ">public</span> slots:
    <span style="color: #0030fF; ">void</span> setXRotation<span style="color: #a06000">(</span><span style="color: #0030fF; ">int</span> angle<span style="color: #a06000">)</span>;
    <span style="color: #0030fF; ">void</span> setYRotation<span style="color: #a06000">(</span><span style="color: #0030fF; ">int</span> angle<span style="color: #a06000">)</span>;
    <span style="color: #0030fF; ">void</span> setZRotation<span style="color: #a06000">(</span><span style="color: #0030fF; ">int</span> angle<span style="color: #a06000">)</span>;

signals:
    <span style="color: #0030fF; ">void</span> xRotationChanged<span style="color: #a06000">(</span><span style="color: #0030fF; ">int</span> angle<span style="color: #a06000">)</span>;
    <span style="color: #0030fF; ">void</span> yRotationChanged<span style="color: #a06000">(</span><span style="color: #0030fF; ">int</span> angle<span style="color: #a06000">)</span>;
    <span style="color: #0030fF; ">void</span> zRotationChanged<span style="color: #a06000">(</span><span style="color: #0030fF; ">int</span> angle<span style="color: #a06000">)</span>;

<span style="color: #0030fF; ">protected</span>:
    <span style="color: #0030fF; ">void</span> initializeGL<span style="color: #a06000">(</span><span style="color: #a06000">)</span>;
    <span style="color: #0030fF; ">void</span> paintGL<span style="color: #a06000">(</span><span style="color: #a06000">)</span>;
    <span style="color: #0030fF; ">void</span> resizeGL<span style="color: #a06000">(</span><span style="color: #0030fF; ">int</span> width, <span style="color: #0030fF; ">int</span> height<span style="color: #a06000">)</span>;
    <span style="color: #0030fF; ">void</span> mousePressEvent<span style="color: #a06000">(</span>QMouseEvent *event<span style="color: #a06000">)</span>;
    <span style="color: #0030fF; ">void</span> mouseMoveEvent<span style="color: #a06000">(</span>QMouseEvent *event<span style="color: #a06000">)</span>;

<span style="color: #0030fF; ">private</span> slots:
    <span style="color: #0030fF; ">void</span> advanceGears<span style="color: #a06000">(</span><span style="color: #a06000">)</span>;

<span style="color: #0030fF; ">private</span>:
    GLuint makeGear<span style="color: #a06000">(</span><span style="color: #0030fF; ">const</span> GLfloat *reflectance, GLdouble innerRadius,
                    GLdouble outerRadius, GLdouble thickness,
                    GLdouble toothSize, GLint toothCount<span style="color: #a06000">)</span>;
    <span style="color: #0030fF; ">void</span> drawGear<span style="color: #a06000">(</span>GLuint gear, GLdouble dx, GLdouble dy, GLdouble dz,
                  GLdouble angle<span style="color: #a06000">)</span>;
    <span style="color: #0030fF; ">void</span> normalizeAngle<span style="color: #a06000">(</span><span style="color: #0030fF; ">int</span> *angle<span style="color: #a06000">)</span>;

    GLuint gear1;
    GLuint gear2;
    GLuint gear3;
    <span style="color: #0030fF; ">int</span> xRot;
    <span style="color: #0030fF; ">int</span> yRot;
    <span style="color: #0030fF; ">int</span> zRot;
    <span style="color: #0030fF; ">int</span> gear1Rot;
    
    QPoint lastPos;
};
#endif</pre></div>
<p>
<div style="background: #f2f2f2; padding: 5px; margin: 4px;"><pre><span style="color: #808080">//glwidget.cpp</span>
<span style="color: #0030fF; ">#include</span> <span style="color: #a06000">&lt;</span>QtGui<span style="color: #a06000">&gt;</span>
<span style="color: #0030fF; ">#include</span> <span style="color: #a06000">&lt;</span>QtOpenGL<span style="color: #a06000">&gt;</span>

<span style="color: #0030fF; ">#include</span> <span style="color: #a06000">&lt;</span>math.h<span style="color: #a06000">&gt;</span>

<span style="color: #0030fF; ">#include</span> <span style="color: #00808F">&quot;glwidget.h&quot;</span>

GLWidget::GLWidget<span style="color: #a06000">(</span>QWidget *parent<span style="color: #a06000">)</span>
    : QGLWidget<span style="color: #a06000">(</span>parent<span style="color: #a06000">)</span>
{
    gear1 = <span style="color: #F04000; ">0</span>;
    gear2 = <span style="color: #F04000; ">0</span>;
    gear3 = <span style="color: #F04000; ">0</span>;
    xRot = <span style="color: #F04000; ">0</span>;
    yRot = <span style="color: #F04000; ">0</span>;
    zRot = <span style="color: #F04000; ">0</span>;
    gear1Rot = <span style="color: #F04000; ">0</span>;

    QTimer *timer = <span style="color: #0030fF; ">new</span> QTimer<span style="color: #a06000">(</span><span style="color: #0030fF; ">this</span><span style="color: #a06000">)</span>;
    connect<span style="color: #a06000">(</span>timer, SIGNAL<span style="color: #a06000">(</span>timeout<span style="color: #a06000">(</span><span style="color: #a06000">)</span><span style="color: #a06000">)</span>, <span style="color: #0030fF; ">this</span>, SLOT<span style="color: #a06000">(</span>advanceGears<span style="color: #a06000">(</span><span style="color: #a06000">)</span><span style="color: #a06000">)</span><span style="color: #a06000">)</span>;
    timer-<span style="color: #a06000">&gt;</span>start<span style="color: #a06000">(</span><span style="color: #F04000; ">20</span><span style="color: #a06000">)</span>;
}

GLWidget::~GLWidget<span style="color: #a06000">(</span><span style="color: #a06000">)</span>
{
    makeCurrent<span style="color: #a06000">(</span><span style="color: #a06000">)</span>;
    glDeleteLists<span style="color: #a06000">(</span>gear1, <span style="color: #F04000; ">1</span><span style="color: #a06000">)</span>;
    glDeleteLists<span style="color: #a06000">(</span>gear2, <span style="color: #F04000; ">1</span><span style="color: #a06000">)</span>;
    glDeleteLists<span style="color: #a06000">(</span>gear3, <span style="color: #F04000; ">1</span><span style="color: #a06000">)</span>;
}

<span style="color: #0030fF; ">void</span> GLWidget::setXRotation<span style="color: #a06000">(</span><span style="color: #0030fF; ">int</span> angle<span style="color: #a06000">)</span>
{
    normalizeAngle<span style="color: #a06000">(</span>&amp;angle<span style="color: #a06000">)</span>;
    <span style="color: #0030fF; ">if</span> <span style="color: #a06000">(</span>angle != xRot<span style="color: #a06000">)</span> {
        xRot = angle;
        emit xRotationChanged<span style="color: #a06000">(</span>angle<span style="color: #a06000">)</span>;
        updateGL<span style="color: #a06000">(</span><span style="color: #a06000">)</span>;
    }
}

<span style="color: #0030fF; ">void</span> GLWidget::setYRotation<span style="color: #a06000">(</span><span style="color: #0030fF; ">int</span> angle<span style="color: #a06000">)</span>
{
    normalizeAngle<span style="color: #a06000">(</span>&amp;angle<span style="color: #a06000">)</span>;
    <span style="color: #0030fF; ">if</span> <span style="color: #a06000">(</span>angle != yRot<span style="color: #a06000">)</span> {
        yRot = angle;
        emit yRotationChanged<span style="color: #a06000">(</span>angle<span style="color: #a06000">)</span>;
        updateGL<span style="color: #a06000">(</span><span style="color: #a06000">)</span>;
    }
}

<span style="color: #0030fF; ">void</span> GLWidget::setZRotation<span style="color: #a06000">(</span><span style="color: #0030fF; ">int</span> angle<span style="color: #a06000">)</span>
{
    normalizeAngle<span style="color: #a06000">(</span>&amp;angle<span style="color: #a06000">)</span>;
    <span style="color: #0030fF; ">if</span> <span style="color: #a06000">(</span>angle != zRot<span style="color: #a06000">)</span> {
        zRot = angle;
        emit zRotationChanged<span style="color: #a06000">(</span>angle<span style="color: #a06000">)</span>;
        updateGL<span style="color: #a06000">(</span><span style="color: #a06000">)</span>;
    }
}

<span style="color: #0030fF; ">void</span> GLWidget::initializeGL<span style="color: #a06000">(</span><span style="color: #a06000">)</span>
{
    <span style="color: #0030fF; ">static</span> <span style="color: #0030fF; ">const</span> GLfloat lightPos<span style="color: #a06000">[</span><span style="color: #F04000; ">4</span><span style="color: #a06000">]</span> = { <span style="color: #F04000; ">5</span>.<span style="color: #F04000; ">0</span>f, <span style="color: #F04000; ">5</span>.<span style="color: #F04000; ">0</span>f, <span style="color: #F04000; ">10</span>.<span style="color: #F04000; ">0</span>f, <span style="color: #F04000; ">1</span>.<span style="color: #F04000; ">0</span>f };
    <span style="color: #0030fF; ">static</span> <span style="color: #0030fF; ">const</span> GLfloat reflectance1<span style="color: #a06000">[</span><span style="color: #F04000; ">4</span><span style="color: #a06000">]</span> = { <span style="color: #F04000; ">0</span>.<span style="color: #F04000; ">8</span>f, <span style="color: #F04000; ">0</span>.<span style="color: #F04000; ">1</span>f, <span style="color: #F04000; ">0</span>.<span style="color: #F04000; ">0</span>f, <span style="color: #F04000; ">1</span>.<span style="color: #F04000; ">0</span>f };
    <span style="color: #0030fF; ">static</span> <span style="color: #0030fF; ">const</span> GLfloat reflectance2<span style="color: #a06000">[</span><span style="color: #F04000; ">4</span><span style="color: #a06000">]</span> = { <span style="color: #F04000; ">0</span>.<span style="color: #F04000; ">0</span>f, <span style="color: #F04000; ">0</span>.<span style="color: #F04000; ">8</span>f, <span style="color: #F04000; ">0</span>.<span style="color: #F04000; ">2</span>f, <span style="color: #F04000; ">1</span>.<span style="color: #F04000; ">0</span>f };
    <span style="color: #0030fF; ">static</span> <span style="color: #0030fF; ">const</span> GLfloat reflectance3<span style="color: #a06000">[</span><span style="color: #F04000; ">4</span><span style="color: #a06000">]</span> = { <span style="color: #F04000; ">0</span>.<span style="color: #F04000; ">2</span>f, <span style="color: #F04000; ">0</span>.<span style="color: #F04000; ">2</span>f, <span style="color: #F04000; ">1</span>.<span style="color: #F04000; ">0</span>f, <span style="color: #F04000; ">1</span>.<span style="color: #F04000; ">0</span>f };

    glLightfv<span style="color: #a06000">(</span>GL_LIGHT0, GL_POSITION, lightPos<span style="color: #a06000">)</span>;
    glEnable<span style="color: #a06000">(</span>GL_LIGHTING<span style="color: #a06000">)</span>;
    glEnable<span style="color: #a06000">(</span>GL_LIGHT0<span style="color: #a06000">)</span>;
    glEnable<span style="color: #a06000">(</span>GL_DEPTH_TEST<span style="color: #a06000">)</span>;

    gear1 = makeGear<span style="color: #a06000">(</span>reflectance1, <span style="color: #F04000; ">1</span>.<span style="color: #F04000; ">0</span>, <span style="color: #F04000; ">4</span>.<span style="color: #F04000; ">0</span>, <span style="color: #F04000; ">1</span>.<span style="color: #F04000; ">0</span>, <span style="color: #F04000; ">0</span>.<span style="color: #F04000; ">7</span>, <span style="color: #F04000; ">20</span><span style="color: #a06000">)</span>;
    gear2 = makeGear<span style="color: #a06000">(</span>reflectance2, <span style="color: #F04000; ">0</span>.<span style="color: #F04000; ">5</span>, <span style="color: #F04000; ">2</span>.<span style="color: #F04000; ">0</span>, <span style="color: #F04000; ">2</span>.<span style="color: #F04000; ">0</span>, <span style="color: #F04000; ">0</span>.<span style="color: #F04000; ">7</span>, <span style="color: #F04000; ">10</span><span style="color: #a06000">)</span>;
    gear3 = makeGear<span style="color: #a06000">(</span>reflectance3, <span style="color: #F04000; ">1</span>.<span style="color: #F04000; ">3</span>, <span style="color: #F04000; ">2</span>.<span style="color: #F04000; ">0</span>, <span style="color: #F04000; ">0</span>.<span style="color: #F04000; ">5</span>, <span style="color: #F04000; ">0</span>.<span style="color: #F04000; ">7</span>, <span style="color: #F04000; ">10</span><span style="color: #a06000">)</span>;

    glEnable<span style="color: #a06000">(</span>GL_NORMALIZE<span style="color: #a06000">)</span>;
    glClearColor<span style="color: #a06000">(</span><span style="color: #F04000; ">0</span>.<span style="color: #F04000; ">0</span>f, <span style="color: #F04000; ">0</span>.<span style="color: #F04000; ">0</span>f, <span style="color: #F04000; ">0</span>.<span style="color: #F04000; ">0</span>f, <span style="color: #F04000; ">1</span>.<span style="color: #F04000; ">0</span>f<span style="color: #a06000">)</span>;    
}

<span style="color: #0030fF; ">void</span> GLWidget::paintGL<span style="color: #a06000">(</span><span style="color: #a06000">)</span>
{
    glClear<span style="color: #a06000">(</span>GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT<span style="color: #a06000">)</span>;

    glPushMatrix<span style="color: #a06000">(</span><span style="color: #a06000">)</span>;
    glRotated<span style="color: #a06000">(</span>xRot / <span style="color: #F04000; ">16</span>.<span style="color: #F04000; ">0</span>, <span style="color: #F04000; ">1</span>.<span style="color: #F04000; ">0</span>, <span style="color: #F04000; ">0</span>.<span style="color: #F04000; ">0</span>, <span style="color: #F04000; ">0</span>.<span style="color: #F04000; ">0</span><span style="color: #a06000">)</span>;
    glRotated<span style="color: #a06000">(</span>yRot / <span style="color: #F04000; ">16</span>.<span style="color: #F04000; ">0</span>, <span style="color: #F04000; ">0</span>.<span style="color: #F04000; ">0</span>, <span style="color: #F04000; ">1</span>.<span style="color: #F04000; ">0</span>, <span style="color: #F04000; ">0</span>.<span style="color: #F04000; ">0</span><span style="color: #a06000">)</span>;
    glRotated<span style="color: #a06000">(</span>zRot / <span style="color: #F04000; ">16</span>.<span style="color: #F04000; ">0</span>, <span style="color: #F04000; ">0</span>.<span style="color: #F04000; ">0</span>, <span style="color: #F04000; ">0</span>.<span style="color: #F04000; ">0</span>, <span style="color: #F04000; ">1</span>.<span style="color: #F04000; ">0</span><span style="color: #a06000">)</span>;

    drawGear<span style="color: #a06000">(</span>gear1, -<span style="color: #F04000; ">3</span>.<span style="color: #F04000; ">0</span>, -<span style="color: #F04000; ">2</span>.<span style="color: #F04000; ">0</span>, <span style="color: #F04000; ">0</span>.<span style="color: #F04000; ">0</span>, gear1Rot / <span style="color: #F04000; ">216</span>.<span style="color: #F04000; ">0</span><span style="color: #a06000">)</span>;
    drawGear<span style="color: #a06000">(</span>gear2, +<span style="color: #F04000; ">3</span>.<span style="color: #F04000; ">1</span>, -<span style="color: #F04000; ">2</span>.<span style="color: #F04000; ">0</span>, <span style="color: #F04000; ">0</span>.<span style="color: #F04000; ">0</span>, -<span style="color: #F04000; ">2</span>.<span style="color: #F04000; ">0</span> * <span style="color: #a06000">(</span>gear1Rot / <span style="color: #F04000; ">16</span>.<span style="color: #F04000; ">0</span><span style="color: #a06000">)</span> - <span style="color: #F04000; ">9</span>.<span style="color: #F04000; ">0</span><span style="color: #a06000">)</span>;

    glRotated<span style="color: #a06000">(</span>+<span style="color: #F04000; ">90</span>.<span style="color: #F04000; ">0</span>, <span style="color: #F04000; ">1</span>.<span style="color: #F04000; ">0</span>, <span style="color: #F04000; ">0</span>.<span style="color: #F04000; ">0</span>, <span style="color: #F04000; ">0</span>.<span style="color: #F04000; ">0</span><span style="color: #a06000">)</span>;
    drawGear<span style="color: #a06000">(</span>gear3, -<span style="color: #F04000; ">3</span>.<span style="color: #F04000; ">1</span>, -<span style="color: #F04000; ">1</span>.<span style="color: #F04000; ">8</span>, -<span style="color: #F04000; ">2</span>.<span style="color: #F04000; ">2</span>, +<span style="color: #F04000; ">2</span>.<span style="color: #F04000; ">0</span> * <span style="color: #a06000">(</span>gear1Rot / <span style="color: #F04000; ">16</span>.<span style="color: #F04000; ">0</span><span style="color: #a06000">)</span> - <span style="color: #F04000; ">2</span>.<span style="color: #F04000; ">0</span><span style="color: #a06000">)</span>;

    glPopMatrix<span style="color: #a06000">(</span><span style="color: #a06000">)</span>;
}

<span style="color: #0030fF; ">void</span> GLWidget::resizeGL<span style="color: #a06000">(</span><span style="color: #0030fF; ">int</span> width, <span style="color: #0030fF; ">int</span> height<span style="color: #a06000">)</span>
{
    <span style="color: #0030fF; ">int</span> side = qMin<span style="color: #a06000">(</span>width, height<span style="color: #a06000">)</span>;
    glViewport<span style="color: #a06000">(</span><span style="color: #a06000">(</span>width - side<span style="color: #a06000">)</span> / <span style="color: #F04000; ">2</span>, <span style="color: #a06000">(</span>height - side<span style="color: #a06000">)</span> / <span style="color: #F04000; ">2</span>, side, side<span style="color: #a06000">)</span>;

    glMatrixMode<span style="color: #a06000">(</span>GL_PROJECTION<span style="color: #a06000">)</span>;
    glLoadIdentity<span style="color: #a06000">(</span><span style="color: #a06000">)</span>;
    glFrustum<span style="color: #a06000">(</span>-<span style="color: #F04000; ">1</span>.<span style="color: #F04000; ">0</span>, +<span style="color: #F04000; ">1</span>.<span style="color: #F04000; ">0</span>, -<span style="color: #F04000; ">1</span>.<span style="color: #F04000; ">0</span>, <span style="color: #F04000; ">1</span>.<span style="color: #F04000; ">0</span>, <span style="color: #F04000; ">5</span>.<span style="color: #F04000; ">0</span>, <span style="color: #F04000; ">60</span>.<span style="color: #F04000; ">0</span><span style="color: #a06000">)</span>;
    glMatrixMode<span style="color: #a06000">(</span>GL_MODELVIEW<span style="color: #a06000">)</span>;
    glLoadIdentity<span style="color: #a06000">(</span><span style="color: #a06000">)</span>;
    glTranslated<span style="color: #a06000">(</span><span style="color: #F04000; ">0</span>.<span style="color: #F04000; ">0</span>, <span style="color: #F04000; ">0</span>.<span style="color: #F04000; ">0</span>, -<span style="color: #F04000; ">40</span>.<span style="color: #F04000; ">0</span><span style="color: #a06000">)</span>;
}

<span style="color: #0030fF; ">void</span> GLWidget::mousePressEvent<span style="color: #a06000">(</span>QMouseEvent *event<span style="color: #a06000">)</span>
{
    lastPos = event-<span style="color: #a06000">&gt;</span>pos<span style="color: #a06000">(</span><span style="color: #a06000">)</span>;
}

<span style="color: #0030fF; ">void</span> GLWidget::mouseMoveEvent<span style="color: #a06000">(</span>QMouseEvent *event<span style="color: #a06000">)</span>
{
    <span style="color: #0030fF; ">int</span> dx = event-<span style="color: #a06000">&gt;</span>x<span style="color: #a06000">(</span><span style="color: #a06000">)</span> - lastPos.x<span style="color: #a06000">(</span><span style="color: #a06000">)</span>;
    <span style="color: #0030fF; ">int</span> dy = event-<span style="color: #a06000">&gt;</span>y<span style="color: #a06000">(</span><span style="color: #a06000">)</span> - lastPos.y<span style="color: #a06000">(</span><span style="color: #a06000">)</span>;

    <span style="color: #0030fF; ">if</span> <span style="color: #a06000">(</span>event-<span style="color: #a06000">&gt;</span>buttons<span style="color: #a06000">(</span><span style="color: #a06000">)</span> &amp; Qt::LeftButton<span style="color: #a06000">)</span> {
        setXRotation<span style="color: #a06000">(</span>xRot + <span style="color: #F04000; ">8</span> * dy<span style="color: #a06000">)</span>;
        setYRotation<span style="color: #a06000">(</span>yRot + <span style="color: #F04000; ">8</span> * dx<span style="color: #a06000">)</span>;
    } <span style="color: #0030fF; ">else</span> <span style="color: #0030fF; ">if</span> <span style="color: #a06000">(</span>event-<span style="color: #a06000">&gt;</span>buttons<span style="color: #a06000">(</span><span style="color: #a06000">)</span> &amp; Qt::RightButton<span style="color: #a06000">)</span> {
        setXRotation<span style="color: #a06000">(</span>xRot + <span style="color: #F04000; ">8</span> * dy<span style="color: #a06000">)</span>;
        setZRotation<span style="color: #a06000">(</span>zRot + <span style="color: #F04000; ">8</span> * dx<span style="color: #a06000">)</span>;
    }
    lastPos = event-<span style="color: #a06000">&gt;</span>pos<span style="color: #a06000">(</span><span style="color: #a06000">)</span>;
}

<span style="color: #0030fF; ">void</span> GLWidget::advanceGears<span style="color: #a06000">(</span><span style="color: #a06000">)</span>
{
    gear1Rot += <span style="color: #F04000; ">2</span> * <span style="color: #F04000; ">16</span>;
    updateGL<span style="color: #a06000">(</span><span style="color: #a06000">)</span>;
}

GLuint GLWidget::makeGear<span style="color: #a06000">(</span><span style="color: #0030fF; ">const</span> GLfloat *reflectance, GLdouble innerRadius,
                          GLdouble outerRadius, GLdouble thickness,
                          GLdouble toothSize, GLint toothCount<span style="color: #a06000">)</span>
{
    <span style="color: #0030fF; ">const</span> <span style="color: #0030fF; ">double</span> Pi = <span style="color: #F04000; ">3</span>.<span style="color: #F04000; ">14159265358979323846</span>;

    GLuint list = glGenLists<span style="color: #a06000">(</span><span style="color: #F04000; ">1</span><span style="color: #a06000">)</span>;
    glNewList<span style="color: #a06000">(</span>list, GL_COMPILE<span style="color: #a06000">)</span>;
    glMaterialfv<span style="color: #a06000">(</span>GL_FRONT, GL_AMBIENT_AND_DIFFUSE, reflectance<span style="color: #a06000">)</span>;

    GLdouble r0 = innerRadius;
    GLdouble r1 = outerRadius - toothSize / <span style="color: #F04000; ">2</span>.<span style="color: #F04000; ">0</span>;
    GLdouble r2 = outerRadius + toothSize / <span style="color: #F04000; ">2</span>.<span style="color: #F04000; ">0</span>;
    GLdouble delta = <span style="color: #a06000">(</span><span style="color: #F04000; ">2</span>.<span style="color: #F04000; ">0</span> * Pi / toothCount<span style="color: #a06000">)</span> / <span style="color: #F04000; ">4</span>.<span style="color: #F04000; ">0</span>;
    GLdouble z = thickness / <span style="color: #F04000; ">2</span>.<span style="color: #F04000; ">0</span>;
    <span style="color: #0030fF; ">int</span> i, j;

    glShadeModel<span style="color: #a06000">(</span>GL_FLAT<span style="color: #a06000">)</span>;

    <span style="color: #0030fF; ">for</span> <span style="color: #a06000">(</span>i = <span style="color: #F04000; ">0</span>; i <span style="color: #a06000">&lt;</span> <span style="color: #F04000; ">2</span>; ++i<span style="color: #a06000">)</span> {
        GLdouble sign = <span style="color: #a06000">(</span>i == <span style="color: #F04000; ">0</span><span style="color: #a06000">)</span> ? +<span style="color: #F04000; ">1</span>.<span style="color: #F04000; ">0</span> : -<span style="color: #F04000; ">1</span>.<span style="color: #F04000; ">0</span>;

        glNormal3d<span style="color: #a06000">(</span><span style="color: #F04000; ">0</span>.<span style="color: #F04000; ">0</span>, <span style="color: #F04000; ">0</span>.<span style="color: #F04000; ">0</span>, sign<span style="color: #a06000">)</span>;

        glBegin<span style="color: #a06000">(</span>GL_QUAD_STRIP<span style="color: #a06000">)</span>;
        <span style="color: #0030fF; ">for</span> <span style="color: #a06000">(</span>j = <span style="color: #F04000; ">0</span>; j <span style="color: #a06000">&lt;</span>= toothCount; ++j<span style="color: #a06000">)</span> {
            GLdouble angle = <span style="color: #F04000; ">2</span>.<span style="color: #F04000; ">0</span> * Pi * j / toothCount;
      glVertex3d<span style="color: #a06000">(</span>r0 * cos<span style="color: #a06000">(</span>angle<span style="color: #a06000">)</span>, r0 * sin<span style="color: #a06000">(</span>angle<span style="color: #a06000">)</span>, sign * z<span style="color: #a06000">)</span>;
      glVertex3d<span style="color: #a06000">(</span>r1 * cos<span style="color: #a06000">(</span>angle<span style="color: #a06000">)</span>, r1 * sin<span style="color: #a06000">(</span>angle<span style="color: #a06000">)</span>, sign * z<span style="color: #a06000">)</span>;
      glVertex3d<span style="color: #a06000">(</span>r0 * cos<span style="color: #a06000">(</span>angle<span style="color: #a06000">)</span>, r0 * sin<span style="color: #a06000">(</span>angle<span style="color: #a06000">)</span>, sign * z<span style="color: #a06000">)</span>;
      glVertex3d<span style="color: #a06000">(</span>r1 * cos<span style="color: #a06000">(</span>angle + <span style="color: #F04000; ">3</span> * delta<span style="color: #a06000">)</span>, r1 * sin<span style="color: #a06000">(</span>angle + <span style="color: #F04000; ">3</span> * delta<span style="color: #a06000">)</span>,
                       sign * z<span style="color: #a06000">)</span>;
        }
        glEnd<span style="color: #a06000">(</span><span style="color: #a06000">)</span>;

        glBegin<span style="color: #a06000">(</span>GL_QUADS<span style="color: #a06000">)</span>;
        <span style="color: #0030fF; ">for</span> <span style="color: #a06000">(</span>j = <span style="color: #F04000; ">0</span>; j <span style="color: #a06000">&lt;</span> toothCount; ++j<span style="color: #a06000">)</span> {
            GLdouble angle = <span style="color: #F04000; ">2</span>.<span style="color: #F04000; ">0</span> * Pi * j / toothCount;
      glVertex3d<span style="color: #a06000">(</span>r1 * cos<span style="color: #a06000">(</span>angle<span style="color: #a06000">)</span>, r1 * sin<span style="color: #a06000">(</span>angle<span style="color: #a06000">)</span>, sign * z<span style="color: #a06000">)</span>;
      glVertex3d<span style="color: #a06000">(</span>r2 * cos<span style="color: #a06000">(</span>angle + delta<span style="color: #a06000">)</span>, r2 * sin<span style="color: #a06000">(</span>angle + delta<span style="color: #a06000">)</span>,
                       sign * z<span style="color: #a06000">)</span>;
      glVertex3d<span style="color: #a06000">(</span>r2 * cos<span style="color: #a06000">(</span>angle + <span style="color: #F04000; ">2</span> * delta<span style="color: #a06000">)</span>, r2 * sin<span style="color: #a06000">(</span>angle + <span style="color: #F04000; ">2</span> * delta<span style="color: #a06000">)</span>,
                       sign * z<span style="color: #a06000">)</span>;
      glVertex3d<span style="color: #a06000">(</span>r1 * cos<span style="color: #a06000">(</span>angle + <span style="color: #F04000; ">3</span> * delta<span style="color: #a06000">)</span>, r1 * sin<span style="color: #a06000">(</span>angle + <span style="color: #F04000; ">3</span> * delta<span style="color: #a06000">)</span>,
                       sign * z<span style="color: #a06000">)</span>;
        }
        glEnd<span style="color: #a06000">(</span><span style="color: #a06000">)</span>;
    }

    glBegin<span style="color: #a06000">(</span>GL_QUAD_STRIP<span style="color: #a06000">)</span>;
    <span style="color: #0030fF; ">for</span> <span style="color: #a06000">(</span>i = <span style="color: #F04000; ">0</span>; i <span style="color: #a06000">&lt;</span> toothCount; ++i<span style="color: #a06000">)</span> {
        <span style="color: #0030fF; ">for</span> <span style="color: #a06000">(</span>j = <span style="color: #F04000; ">0</span>; j <span style="color: #a06000">&lt;</span> <span style="color: #F04000; ">2</span>; ++j<span style="color: #a06000">)</span> {
            GLdouble angle = <span style="color: #F04000; ">2</span>.<span style="color: #F04000; ">0</span> * Pi * <span style="color: #a06000">(</span>i + <span style="color: #a06000">(</span>j / <span style="color: #F04000; ">2</span>.<span style="color: #F04000; ">0</span><span style="color: #a06000">)</span><span style="color: #a06000">)</span> / toothCount;
            GLdouble s1 = r1;
            GLdouble s2 = r2;
            <span style="color: #0030fF; ">if</span> <span style="color: #a06000">(</span>j == <span style="color: #F04000; ">1</span><span style="color: #a06000">)</span>
                qSwap<span style="color: #a06000">(</span>s1, s2<span style="color: #a06000">)</span>;

      glNormal3d<span style="color: #a06000">(</span>cos<span style="color: #a06000">(</span>angle<span style="color: #a06000">)</span>, sin<span style="color: #a06000">(</span>angle<span style="color: #a06000">)</span>, <span style="color: #F04000; ">0</span>.<span style="color: #F04000; ">0</span><span style="color: #a06000">)</span>;
      glVertex3d<span style="color: #a06000">(</span>s1 * cos<span style="color: #a06000">(</span>angle<span style="color: #a06000">)</span>, s1 * sin<span style="color: #a06000">(</span>angle<span style="color: #a06000">)</span>, +z<span style="color: #a06000">)</span>;
      glVertex3d<span style="color: #a06000">(</span>s1 * cos<span style="color: #a06000">(</span>angle<span style="color: #a06000">)</span>, s1 * sin<span style="color: #a06000">(</span>angle<span style="color: #a06000">)</span>, -z<span style="color: #a06000">)</span>;

      glNormal3d<span style="color: #a06000">(</span>s2 * sin<span style="color: #a06000">(</span>angle + delta<span style="color: #a06000">)</span> - s1 * sin<span style="color: #a06000">(</span>angle<span style="color: #a06000">)</span>,
                       s1 * cos<span style="color: #a06000">(</span>angle<span style="color: #a06000">)</span> - s2 * cos<span style="color: #a06000">(</span>angle + delta<span style="color: #a06000">)</span>, <span style="color: #F04000; ">0</span>.<span style="color: #F04000; ">0</span><span style="color: #a06000">)</span>;
      glVertex3d<span style="color: #a06000">(</span>s2 * cos<span style="color: #a06000">(</span>angle + delta<span style="color: #a06000">)</span>, s2 * sin<span style="color: #a06000">(</span>angle + delta<span style="color: #a06000">)</span>, +z<span style="color: #a06000">)</span>;
      glVertex3d<span style="color: #a06000">(</span>s2 * cos<span style="color: #a06000">(</span>angle + delta<span style="color: #a06000">)</span>, s2 * sin<span style="color: #a06000">(</span>angle + delta<span style="color: #a06000">)</span>, -z<span style="color: #a06000">)</span>;
        }
    }
    glVertex3d<span style="color: #a06000">(</span>r1, <span style="color: #F04000; ">0</span>.<span style="color: #F04000; ">0</span>, +z<span style="color: #a06000">)</span>;
    glVertex3d<span style="color: #a06000">(</span>r1, <span style="color: #F04000; ">0</span>.<span style="color: #F04000; ">0</span>, -z<span style="color: #a06000">)</span>;
    glEnd<span style="color: #a06000">(</span><span style="color: #a06000">)</span>;

    glShadeModel<span style="color: #a06000">(</span>GL_SMOOTH<span style="color: #a06000">)</span>;

    glBegin<span style="color: #a06000">(</span>GL_QUAD_STRIP<span style="color: #a06000">)</span>;
    <span style="color: #0030fF; ">for</span> <span style="color: #a06000">(</span>i = <span style="color: #F04000; ">0</span>; i <span style="color: #a06000">&lt;</span>= toothCount; ++i<span style="color: #a06000">)</span> {
  GLdouble angle = i * <span style="color: #F04000; ">2</span>.<span style="color: #F04000; ">0</span> * Pi / toothCount;
  glNormal3d<span style="color: #a06000">(</span>-cos<span style="color: #a06000">(</span>angle<span style="color: #a06000">)</span>, -sin<span style="color: #a06000">(</span>angle<span style="color: #a06000">)</span>, <span style="color: #F04000; ">0</span>.<span style="color: #F04000; ">0</span><span style="color: #a06000">)</span>;
  glVertex3d<span style="color: #a06000">(</span>r0 * cos<span style="color: #a06000">(</span>angle<span style="color: #a06000">)</span>, r0 * sin<span style="color: #a06000">(</span>angle<span style="color: #a06000">)</span>, +z<span style="color: #a06000">)</span>;
  glVertex3d<span style="color: #a06000">(</span>r0 * cos<span style="color: #a06000">(</span>angle<span style="color: #a06000">)</span>, r0 * sin<span style="color: #a06000">(</span>angle<span style="color: #a06000">)</span>, -z<span style="color: #a06000">)</span>;
    }
    glEnd<span style="color: #a06000">(</span><span style="color: #a06000">)</span>;

    glEndList<span style="color: #a06000">(</span><span style="color: #a06000">)</span>;

    <span style="color: #0030fF; ">return</span> list;
}

<span style="color: #0030fF; ">void</span> GLWidget::drawGear<span style="color: #a06000">(</span>GLuint gear, GLdouble dx, GLdouble dy, GLdouble dz,
                        GLdouble angle<span style="color: #a06000">)</span>
{
    glPushMatrix<span style="color: #a06000">(</span><span style="color: #a06000">)</span>;
    glTranslated<span style="color: #a06000">(</span>dx, dy, dz<span style="color: #a06000">)</span>;
    glRotated<span style="color: #a06000">(</span>angle, <span style="color: #F04000; ">0</span>.<span style="color: #F04000; ">0</span>, <span style="color: #F04000; ">0</span>.<span style="color: #F04000; ">0</span>, <span style="color: #F04000; ">1</span>.<span style="color: #F04000; ">0</span><span style="color: #a06000">)</span>;
    glCallList<span style="color: #a06000">(</span>gear<span style="color: #a06000">)</span>;
    glPopMatrix<span style="color: #a06000">(</span><span style="color: #a06000">)</span>;
}

<span style="color: #0030fF; ">void</span> GLWidget::normalizeAngle<span style="color: #a06000">(</span><span style="color: #0030fF; ">int</span> *angle<span style="color: #a06000">)</span>
{
    <span style="color: #0030fF; ">while</span> <span style="color: #a06000">(</span>*angle <span style="color: #a06000">&lt;</span> <span style="color: #F04000; ">0</span><span style="color: #a06000">)</span>
        *angle += <span style="color: #F04000; ">360</span> * <span style="color: #F04000; ">16</span>;
    <span style="color: #0030fF; ">while</span> <span style="color: #a06000">(</span>*angle <span style="color: #a06000">&gt;</span> <span style="color: #F04000; ">360</span> * <span style="color: #F04000; ">16</span><span style="color: #a06000">)</span>
        *angle -= <span style="color: #F04000; ">360</span> * <span style="color: #F04000; ">16</span>;
}</pre></div></p>
<p>Хотя там использован QT, но реализация понятна и ее можно сделать в OGL.</p>
  </div>
</div>

<a id="l"></a>
<p>/ <b><a href="http://www.gamedev.ru/forum/">Форум</a></b> / <a href="http://www.gamedev.ru/code/forum/">Программирование игр</a> / <a href="http://www.gamedev.ru/code/forum/?common">Общее</a></p>
<table class="r" cellspacing="1" cellpadding="3" width="100%">
<tr><td style="text-align: right"><form method="post" action="" onsubmit="return check_submit(this)"><div><input type="hidden" name="action" value="printpage" /><input type="submit" value="Версия для печати " class="thinbut" /></div></form></td>
</tr>
</table>

   <!--END BODY-->
   <div class="seo"></div>
  </div>

  <div id="main_add"></div>
  </div>

  <div id="right">
    
  </div>

  <div class="clear"></div>
 </div>

 <div id="footer"> <a href="http://www.gamedev.ru/users/?login">Войти</a> | <a href="http://www.gamedev.ru/members/">Участники</a> | <a href="http://www.gamedev.ru/top/">Каталог сайтов</a> | <a href="http://www.gamedev.ru/tags/">Категории</a> | <a href="http://www.gamedev.ru/news/?adoc=arch">Архив новостей</a></div>
 <div id="bottom">
	<div>2001—2015 &copy; <b>GameDev.ru — Разработка игр</b></div>
	<div id="social"></div>
  <div id="pda"></div>
  <div id="counters"></div>
 </div>
 
<script type="text/javascript"><!--
skif.run();
//-->
</script>
</body>
</html>
