#include <stdio.h>
#include <conio.h>
#include <stdlib.h>

//-----------------------------------------------
// сортировка погружением
//-----------------------------------------------
// A[]	- сортируемый массив
// N	- количество элементов в массиве
// D	- шаг между сортируемыми элементами
//-----------------------------------------------
void insert_sort(double A[], int N, int D = 1)
{
	int i, j;
	for (i = D; i < N; i += D)   // Пока не достигли " дна" или меньшего себя
    for (j = i; j != 0 && A[j] < A[j - D]; j -= D)
	{
		double c = A[j];
		A[j] = A[j - D];
		A[j - D] = c;
    }
}

//-----------------------------------------------
// сортировка Шелла
//-----------------------------------------------
// A[]	- сортируемый массив
// N	- количество элементов в массиве
//-----------------------------------------------
void sort_shell(double A[], int N)
{
	int i, d = 1, j, tmp;                                     
	// подбор количества групп
	while (d < N) d = d * 2; 
	// сортировка Шелла
	while (d > 1)
	{
		d = d / 2;
		// сортировка групп методом "вставка погружением"
		for (i = 0; i < d; i++)		
			insert_sort(A + i, N-i, d);
	}
}

void print_array(double A[], int N)
{
	int i;
	for (i = 0; i < N; i++)
		printf("%4.0lf\t", A[i]);
        printf("\n");
}

//-----------------------------------------------
// главная функция программы
//-----------------------------------------------
void main()
{
	const int N = 100;
        // выделяем память
	double* A = new double [N];
	int i;
	clrscr();

        // заполняем массив случайными числами
	for (i = 0; i < N; i++)
		A[i] = rand() % 1000;

	// вывод исходных данных
	printf("the source data (double A[%d])\n", N);
        print_array(A, N);

        // сортируем методом Шелла
	sort_shell(A, N);
   
	// вывод результата
        printf("the result\n");
        print_array(A, N);
	
        // освобождаем память
	delete [] A;

	getch();
}

